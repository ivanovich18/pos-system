// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Defines how the Prisma Client is generated
generator client {
  provider = "prisma-client-js"
}

// Defines your database connection (PostgreSQL in this case)
// The URL is read from the .env file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// --- Application Models ---

// Model for Products in your inventory
model Product {
  id            Int      @id @default(autoincrement()) // Unique ID for each product
  name          String   // Name of the product
  description   String?  // Optional description
  price         Decimal  // Price (use Decimal for money)
  barcode       String   @unique // Barcode - must be unique
  stock         Int      @default(0) // Current stock level
  createdAt     DateTime @default(now()) // When the product was added
  updatedAt     DateTime @updatedAt // When the product was last updated

  // Relation field: Links to items sold in transactions
  // This allows navigating from Product -> TransactionItem[]
  transactionItems TransactionItem[]
}

model User {
  id          Int     @id @default(autoincrement())
  username    String  @unique
  password    String  // Stores the securely HASHED password
  role        String  @default("cashier")
  createdAt   DateTime  @default(now())

  // transactions Transaction[]
}

// Model for Sales Transactions
model Transaction {
  id          Int      @id @default(autoincrement()) // Unique ID for each transaction
  totalAmount Decimal  // The final total amount for this transaction
  createdAt   DateTime @default(now()) // When the transaction occurred

  // Relation field: Links to the specific items sold in this transaction
  // This allows navigating from Transaction -> TransactionItem[]
  items       TransactionItem[]
}

// Model for individual items within a specific Transaction
// This acts as a join table between Transaction and Product, storing sale details
model TransactionItem {
  id            Int      @id @default(autoincrement()) // Unique ID for this line item
  quantity      Int      // How many units of the product were sold in this transaction
  priceAtSale   Decimal  // Price of ONE unit of the product *at the time of this specific transaction*

  // Foreign Keys & Relations
  transactionId Int         // Links to the Transaction table
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade) // If Transaction is deleted, delete its items

  productId     Int         // Links to the Product table
  product       Product     @relation(fields: [productId], references: [id], onDelete: Restrict) // Prevent deleting a Product if it's part of a transaction history

  // Add database indexes for performance on foreign keys
  @@index([transactionId])
  @@index([productId])
}